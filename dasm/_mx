// expansion at src\_object.d(72,2)

		class TypeInfo_g : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Ag : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_a : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Aa : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_w : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Aw : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_d : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Ad : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_f : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Af : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_i : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Ai : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_l : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Al : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_s : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_As : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_h : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Ah : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_k : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Ak : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_m : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Am : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_t : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_At : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_v : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Av : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at src\_object.d(72,2)

		class TypeInfo_u : TypeInfo {
			override size_t size() const { return type.sizeof; }
			override bool equals(void* a, void* b) {

				static if(is(type == void))
					return false;
				else
				return (*(cast(type*) a) == (*(cast(type*) b)));
			}
		}
		class TypeInfo_Au : TypeInfo_Array {
			override const(TypeInfo) next() const { return typeid(type); }
			override bool equals(void* av, void* bv) {

				type[] a = *(cast(type[]*) av);
				type[] b = *(cast(type[]*) bv);


				static if(is(type == void))
					return false;
				else {
					for(int i = 0; i < a.length; i++)
						if(a[i] != b[i]) return false;
					return true;
				}
			}
		}
	

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

// expansion at 
.object.size_t h = 0;foreach (i, T; typeof(p.tupleof))    static if(is(T* : const(.object.Object)*))         h = h * 33 + typeid(const(.object.Object)).getHash(cast(const void*)&p.tupleof[i]);    else         h = h * 33 + typeid(T).getHash(cast(const void*)&p.tupleof[i]);return h;

